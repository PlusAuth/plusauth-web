{"version":3,"file":"plusauth-web.es.js","sources":["../node_modules/@simplewebauthn/browser/dist/bundle/index.js","../src/http.ts","../src/auth/auth.ts","../src/auth/mfa.ts","../src/constants/mfa_code_type.ts","../src/index.ts"],"sourcesContent":["/* [@simplewebauthn/browser@6.2.1] */\nfunction utf8StringToBuffer(value) {\n    return new TextEncoder().encode(value);\n}\n\nfunction bufferToBase64URLString(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let str = '';\n    for (const charCode of bytes) {\n        str += String.fromCharCode(charCode);\n    }\n    const base64String = btoa(str);\n    return base64String.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nfunction base64URLStringToBuffer(base64URLString) {\n    const base64 = base64URLString.replace(/-/g, '+').replace(/_/g, '/');\n    const padLength = (4 - (base64.length % 4)) % 4;\n    const padded = base64.padEnd(base64.length + padLength, '=');\n    const binary = atob(padded);\n    const buffer = new ArrayBuffer(binary.length);\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return buffer;\n}\n\nfunction browserSupportsWebAuthn() {\n    return ((window === null || window === void 0 ? void 0 : window.PublicKeyCredential) !== undefined && typeof window.PublicKeyCredential === 'function');\n}\n\nfunction toPublicKeyCredentialDescriptor(descriptor) {\n    const { id } = descriptor;\n    return {\n        ...descriptor,\n        id: base64URLStringToBuffer(id),\n        transports: descriptor.transports,\n    };\n}\n\nfunction isValidDomain(hostname) {\n    return (hostname === 'localhost' || /^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$/i.test(hostname));\n}\n\nclass WebAuthnError extends Error {\n    constructor(message, name = 'WebAuthnError') {\n        super(message);\n        this.name = name;\n    }\n}\n\nfunction identifyRegistrationError({ error, options, }) {\n    var _a, _b;\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal === new AbortController().signal) {\n            return new WebAuthnError('Registration ceremony was sent an abort signal', 'AbortError');\n        }\n    }\n    else if (error.name === 'ConstraintError') {\n        if (((_a = publicKey.authenticatorSelection) === null || _a === void 0 ? void 0 : _a.requireResidentKey) === true) {\n            return new WebAuthnError('Discoverable credentials were required but no available authenticator supported it', 'ConstraintError');\n        }\n        else if (((_b = publicKey.authenticatorSelection) === null || _b === void 0 ? void 0 : _b.userVerification) === 'required') {\n            return new WebAuthnError('User verification was required but no available authenticator supported it', 'ConstraintError');\n        }\n    }\n    else if (error.name === 'InvalidStateError') {\n        return new WebAuthnError('The authenticator was previously registered', 'InvalidStateError');\n    }\n    else if (error.name === 'NotAllowedError') {\n        return new WebAuthnError('User clicked cancel, or the registration ceremony timed out', 'NotAllowedError');\n    }\n    else if (error.name === 'NotSupportedError') {\n        const validPubKeyCredParams = publicKey.pubKeyCredParams.filter(param => param.type === 'public-key');\n        if (validPubKeyCredParams.length === 0) {\n            return new WebAuthnError('No entry in pubKeyCredParams was of type \"public-key\"', 'NotSupportedError');\n        }\n        return new WebAuthnError('No available authenticator supported any of the specified pubKeyCredParams algorithms', 'NotSupportedError');\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError(`${window.location.hostname} is an invalid domain`, 'SecurityError');\n        }\n        else if (publicKey.rp.id !== effectiveDomain) {\n            return new WebAuthnError(`The RP ID \"${publicKey.rp.id}\" is invalid for this domain`, 'SecurityError');\n        }\n    }\n    else if (error.name === 'TypeError') {\n        if (publicKey.user.id.byteLength < 1 || publicKey.user.id.byteLength > 64) {\n            return new WebAuthnError('User ID was not between 1 and 64 characters', 'TypeError');\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError('The authenticator was unable to process the specified options, or could not create a new credential', 'UnknownError');\n    }\n    return error;\n}\n\nclass WebAuthnAbortService {\n    createNewAbortSignal() {\n        if (this.controller) {\n            this.controller.abort('Cancelling existing WebAuthn API call for new one');\n        }\n        this.controller = new AbortController();\n        return this.controller.signal;\n    }\n}\nconst webauthnAbortService = new WebAuthnAbortService();\n\nasync function startRegistration(creationOptionsJSON) {\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    const publicKey = {\n        ...creationOptionsJSON,\n        challenge: base64URLStringToBuffer(creationOptionsJSON.challenge),\n        user: {\n            ...creationOptionsJSON.user,\n            id: utf8StringToBuffer(creationOptionsJSON.user.id),\n        },\n        excludeCredentials: creationOptionsJSON.excludeCredentials.map(toPublicKeyCredentialDescriptor),\n    };\n    const options = { publicKey };\n    options.signal = webauthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.create(options));\n    }\n    catch (err) {\n        throw identifyRegistrationError({ error: err, options });\n    }\n    if (!credential) {\n        throw new Error('Registration was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    const credentialJSON = {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            attestationObject: bufferToBase64URLString(response.attestationObject),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: credential.authenticatorAttachment,\n    };\n    if (typeof response.getTransports === 'function') {\n        credentialJSON.transports = response.getTransports();\n    }\n    return credentialJSON;\n}\n\nfunction bufferToUTF8String(value) {\n    return new TextDecoder('utf-8').decode(value);\n}\n\nasync function browserSupportsWebAuthnAutofill() {\n    if (navigator.credentials.conditionalMediationSupported) {\n        return true;\n    }\n    const globalPublicKeyCredential = window.PublicKeyCredential;\n    return (globalPublicKeyCredential.isConditionalMediationAvailable !== undefined &&\n        globalPublicKeyCredential.isConditionalMediationAvailable());\n}\n\nfunction identifyAuthenticationError({ error, options, }) {\n    var _a;\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal === new AbortController().signal) {\n            return new WebAuthnError('Authentication ceremony was sent an abort signal', 'AbortError');\n        }\n    }\n    else if (error.name === 'NotAllowedError') {\n        if ((_a = publicKey.allowCredentials) === null || _a === void 0 ? void 0 : _a.length) {\n            return new WebAuthnError('No available authenticator recognized any of the allowed credentials', 'NotAllowedError');\n        }\n        return new WebAuthnError('User clicked cancel, or the authentication ceremony timed out', 'NotAllowedError');\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError(`${window.location.hostname} is an invalid domain`, 'SecurityError');\n        }\n        else if (publicKey.rpId !== effectiveDomain) {\n            return new WebAuthnError(`The RP ID \"${publicKey.rpId}\" is invalid for this domain`, 'SecurityError');\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError('The authenticator was unable to process the specified options, or could not create a new assertion signature', 'UnknownError');\n    }\n    return error;\n}\n\nasync function startAuthentication(requestOptionsJSON, useBrowserAutofill = false) {\n    var _a, _b;\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    let allowCredentials;\n    if (((_a = requestOptionsJSON.allowCredentials) === null || _a === void 0 ? void 0 : _a.length) !== 0) {\n        allowCredentials = (_b = requestOptionsJSON.allowCredentials) === null || _b === void 0 ? void 0 : _b.map(toPublicKeyCredentialDescriptor);\n    }\n    const publicKey = {\n        ...requestOptionsJSON,\n        challenge: base64URLStringToBuffer(requestOptionsJSON.challenge),\n        allowCredentials,\n    };\n    const options = {};\n    if (useBrowserAutofill) {\n        if (!(await browserSupportsWebAuthnAutofill())) {\n            throw Error('Browser does not support WebAuthn autofill');\n        }\n        const eligibleInputs = document.querySelectorAll(\"input[autocomplete*='webauthn']\");\n        if (eligibleInputs.length < 1) {\n            throw Error('No <input> with `\"webauthn\"` in its `autocomplete` attribute was detected');\n        }\n        options.mediation = 'conditional';\n        publicKey.allowCredentials = [];\n    }\n    options.publicKey = publicKey;\n    options.signal = webauthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.get(options));\n    }\n    catch (err) {\n        throw identifyAuthenticationError({ error: err, options });\n    }\n    if (!credential) {\n        throw new Error('Authentication was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let userHandle = undefined;\n    if (response.userHandle) {\n        userHandle = bufferToUTF8String(response.userHandle);\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            authenticatorData: bufferToBase64URLString(response.authenticatorData),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            signature: bufferToBase64URLString(response.signature),\n            userHandle,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: credential.authenticatorAttachment,\n    };\n}\n\nasync function platformAuthenticatorIsAvailable() {\n    if (!browserSupportsWebAuthn()) {\n        return false;\n    }\n    return PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n}\n\nexport { browserSupportsWebAuthn, browserSupportsWebAuthnAutofill, platformAuthenticatorIsAvailable, startAuthentication, startRegistration };\n","/**\n * @internal\n */\nfunction fetchAsPromise( url: string, options: RequestInit ) {\n  return new Promise( function ( resolve, reject ){\n    fetch( url, options ).then( rawResponse => {\n      const contentType = rawResponse.headers.get( 'content-type' )\n      // const clone = rawResponse.clone()\n      let response = null\n      rawResponse.text().then( value => {\n        if ( contentType && contentType.indexOf( 'application/json' ) > -1 ){\n          response = Object.assign( JSON.parse( value ), { _raw: rawResponse } )\n        } else {\n          response = { data: value, _raw: rawResponse }\n        }\n        // TODO: migrate to object response\n        // response.__proto__._raw = clone\n\n        if ( rawResponse.ok ){\n          resolve( response )\n        } else if ( rawResponse.status === 400\n                    && response.error === 'xhr_request'\n                    && response.location ){\n          window.location.replace( response.location );\n          return false;\n        } else {\n          reject( response )\n        }\n      } )\n    } ).catch( reject )\n  } )\n}\n\n/**\n * Helper service for posting requests. It is intended to be used internally.\n * @public\n */\nexport class HttpService {\n  /**\n   * @internal\n   */\n  http: any\n\n  ['constructor']!: typeof HttpService\n\n  constructor( apiURL: string, options?: Partial<RequestInit> ) {\n    const http: any = {};\n    ['get', 'post', 'patch', 'delete'].forEach( method => {\n      http[method] = function ( ...args: any[] ) {\n        const fetchOptions: RequestInit = Object.assign( {\n          method,\n          credentials: 'include',\n          mode:        'cors',\n        }, options || {} )\n\n        fetchOptions.headers = Object.assign( {\n          'Content-Type':     'application/json',\n          'Accept':           'application/json',\n          'X-Requested-With': 'XMLHttpRequest'\n        }, fetchOptions.headers || {} )\n\n        method !== 'get' ? fetchOptions.body = JSON.stringify( args[1] ) : null\n        if ( typeof args[0] !== 'string' ){\n          return fetchAsPromise.call( null, apiURL, fetchOptions )\n        } else {\n          return fetchAsPromise.call( null, apiURL + args[0], fetchOptions )\n        }\n      }\n    } )\n    this.http = http\n  }\n}\n","import { HttpService } from '../http';\n\n/**\n * Class containing authorization related methods.\n * @public\n */\nexport class AuthService extends HttpService {\n  /**\n   * @internal\n   */\n  constructor( baseURL: string ) {\n    super( baseURL );\n  }\n\n  /**\n   * Submits user credentials to the endpoint `/signin`.\n   *\n   * @param fields - Key/Value object for validating user.\n   * @param strategy - PlusAuth strategy to check user. Make sure you have created this strategy\n   * in your tenant.\n   *\n   * @example\n   * Here is a simple usage.\n   * ```js\n   *  auth.signIn( { username: \"johndoe@example.com\", password: \"mypassword\" } )\n   * ```\n   *\n   * @example\n   * With different strategy.\n   * ```js\n   *  auth.signIn( { username: \"johndoe@example.com\", password: \"mypassword\" }, \"myLdapStrategy\" )\n   * ```\n   */\n  public signIn( fields: { [key: string]: any }, strategy?: string ): Promise<any> {\n    return this.http.post( '/signin', { ...fields, strategy } );\n  }\n\n  /**\n   * Posts a request for registering a user.\n   *\n   * @param fields - Key/Value object containing user information.\n   * @param strategy - PlusAuth strategy to create the user for. Make sure you have created this\n   * strategy in your tenant.\n   *\n   * @example\n   * Here is a simple usage.\n   * ```\n   *  auth.signUp( { username: \"johndoe@example.com\", password: \"mypassword\" } )\n   * ```\n   *\n   * @example\n   * With phone number.\n   * ```\n   *  auth.signUp( { username: \"johndoe@example.com\", password: \"mypassword\", phone_number: '+11231212123' } )\n   * ```\n   *\n   * @example\n   * With different strategy.\n   * ```js\n   *  auth.signUp( { username: \"johndoe@example.com\", password: \"mypassword\" }, \"myLdapStrategy\" )\n   * ```\n   */\n  public signUp( fields: { [key: string]: any }, strategy?: string ): Promise<any> {\n    return this.http.post( '/signup', { ...fields, strategy } );\n  }\n\n  /**\n   * In some cases user may need to enter additional information for their profile. For example\n   * applications may force users to enter their phone number. `Fill Missing` view in PlusAuth\n   * uses this method to post the form.\n   *\n   * @param fields - Key/Value object containing user information\n   *\n   * @example\n   * ```js\n   * auth.updateMissingInformation({ phone_number: '+1222334455'})\n   * ```\n   */\n  public updateMissingInformation( fields: { [key: string]: any } ): Promise<any> {\n    return this.http.post( '/account/updateMissingInformation', fields );\n  }\n\n  /**\n   * Request password reset email. `Forgot Password` view in PlusAuth uses this method to post\n   * the form.\n   *\n   * @param email - Email of user requesting password reset.\n   *\n   * @example\n   * ```js\n   * auth.requestResetPassword('john@doe.com')\n   * ```\n   */\n  public requestResetPassword( email: string ): Promise<any> {\n    return this.http.post( '/account/forgotPassword', {\n      email,\n    } );\n  }\n\n  /**\n   * After clicking the reset password email, users will be delivered on a page which will\n   * request their new password. Use this method to post their new password and token from the\n   * url. If `Auto SignIn` is enabled in `Settings > Login` user will be redirected to `Tenant Login URL` automatically. `Reset Password` view in PlusAuth uses this method to submit the form.\n   *\n   * @param password - New password of user\n   * @param hash - Received token in the url\n   *\n   * @example\n   * ```js\n   * const pathParts = location.pathname.split('/')\n   * const token = pathParts[pathParts.length - 1];\n   *\n   * auth.resetPassword('NEW_PASSWORD', token).then(function(){\n   *   console.log('Password reset successfully')\n   * })\n   * ```\n   */\n  public resetPassword( password: string, hash: string ): Promise<any> {\n    return this.http.post( `/account/resetPassword/${ hash }`, {\n      password,\n    } );\n  }\n\n\n  /**\n   * Allow applications to access displayed user information. When third-party applications\n   * request to access user information they need the consent of the end user. This method will\n   * allow the 3rd party application to receive the information. `Allow` button in `Consent`\n   * view uses this method.\n   *\n   * @example\n   * ```js\n   * auth.acceptConsent()\n   * ```\n   */\n  public acceptConsent(): Promise<any> {\n    return this.http.post( '/signin/consent/confirm' );\n  }\n\n\n  /**\n   * Forbid applications to access displayed user information. When third-party applications\n   * request to access user information they need the consent of the end user. This method will\n   * reject the 3rd party application's request to receive the information. `Reject` button in\n   * `Consent` view uses this method.\n   *\n   * @example\n   * ```js\n   * auth.rejectConsent()\n   * ```\n   */\n  public rejectConsent(): Promise<any> {\n    return this.http.get( '/signin/consent/reject' );\n  }\n\n  /**\n   * Helper method for checking password strength for rules defined in PlusAuth. This method\n   * would be useful in SignUp and ResetPassword views.\n   *\n   * @param value - Password to check\n   * @param passwordRules - Object containing password rules\n   *\n   * @example\n   * ```js\n   * const password = '123'\n   * const passwordRules = window.PlusAuth.passwordPolicy\n   *\n   * const passwordStrength = auth.checkPasswordStrength(password, passwordRules)\n   *\n   * if( passwordStrength === true ){\n   *   console.log('password is strong enough')\n   * } else {\n   *   console.log('Password is not strong enough', passwordStrength)\n   * }\n   * ```\n   */\n  public checkPasswordStrength( value: string, passwordRules: any = {} ): any {\n    value = value ?? '';\n    const errors: any = {};\n    // eslint-disable-next-line prefer-const\n    let { min, max, number, lowerCase, upperCase, customChars, customRegexp } = passwordRules;\n\n    lowerCase = Number( lowerCase );\n    upperCase = Number( upperCase );\n    number = Number( number );\n    if (\n      lowerCase &&\n      !new RegExp( `(?=(.*[a-z])${ lowerCase > 0 ? `{${ lowerCase },}` : '' })` ).test( value )\n    ) {\n      errors.lowerCase = true;\n    }\n    if (\n      upperCase &&\n      !new RegExp(\n        `(?=(.*[A-Z])${ upperCase > 0 ? `{${ upperCase },}` : '' })`\n      ).test( value )\n    ) {\n      errors.upperCase = true;\n    }\n    if (\n      number &&\n      !new RegExp(\n        `(?=(.*[0-9])${ number > 0 ? `{${ number },}` : '' })`\n      ).test( value )\n    ) {\n      errors.number = true;\n    }\n    if ( min != null && value.length < min ) {\n      errors.min = true;\n    }\n    if ( max != null && value.length > max ) {\n      errors.max = true;\n    }\n    if ( customChars &&\n      !customChars.split( '' ).some( ( char: string ) => value.indexOf( char ) > -1 )\n    ) {\n      errors.customChars = true;\n    }\n\n    if ( customRegexp && customRegexp.value ) {\n      if ( !new RegExp( customRegexp ).test( customRegexp.value ) ) {\n        return customRegexp.message || ' ';\n      }\n    }\n\n    return Object.keys( errors ).length > 0 ? errors : true;\n  }\n}\n","import { MFACodeType } from '../constants';\nimport { HttpService } from '../http';\n\n/**\n * Class containing Multi Factor Authorization related methods.\n * @public\n */\nexport class MFAService extends HttpService {\n  /**\n   * @internal\n   */\n  constructor( baseURL: string ) {\n    super( baseURL );\n  }\n\n  /**\n   * Submit user provided code for validation.\n   *\n   * @param code - User provided code\n   * @param codeType - Method of MFA\n   *\n   * @example\n   * Validate SMS code.\n   * ```js\n   * mfa.validateCode('123456', MFACodeType.SMS).catch( function(err){\n   *   console.error('Code is not valid', err)\n   * })\n   * ```\n   *\n   * @example\n   * Validate Email code.\n   * ```js\n   * mfa.validateCode('123456', MFACodeType.EMAIL).catch( function(err){\n   *   console.error('Code is not valid', err)\n   * })\n   * ```\n   *\n   * @example\n   * Validate OTP code.\n   * ```js\n   * mfa.validateCode('123456', MFACodeType.OTP).catch( function(err){\n   *   console.error('Code is not valid', err)\n   * })\n   *```\n   *\n   * @example\n   * Register WebAuthN device.\n   * ```js\n   * PlusAuthWeb.registerDevice(window.PlusAuth.details.registration_options)\n   * .then(function(deviceRegistrationResult){\n   *    mfa.validateCode(deviceRegistrationResult, MFACodeType.WEBAUTHN).catch( function(err){\n   *      console.error('Registration failed', err)\n   *    })\n   * })\n   *```\n   *\n   * @example\n   * Verify WebAuthN device.\n   * ```js\n   * PlusAuthWeb.verify_device(window.PlusAuth.details.authentication_options)\n   * .then(function(deviceVerificationResult){\n   *    mfa.validateCode(deviceVerificationResult, MFACodeType.WEBAUTHN).catch( function(err){\n   *      console.error('Verification failed', err)\n   *    })\n   * })\n   * ```\n   */\n  public async validateCode(\n    code: Record<string, any>,\n    codeType: MFACodeType.WEBAUTHN\n  ): Promise<any>;\n\n  public async validateCode(\n    code: string,\n    codeType: Exclude<MFACodeType, MFACodeType.WEBAUTHN>\n  ): Promise<any>;\n\n  public async validateCode(\n    code: string | Record<string, any>,\n    codeType: MFACodeType\n  ): Promise<any> {\n    return this.http.post( `/signin/challenge/${ codeType }`, {\n      code\n    } );\n  }\n}\n","/**\n * @packageDocumentation\n * @module Constants\n */\n\n/**\n * Code types to be used in Multi-Factor Authentication\n *\n * @public\n */\nexport enum MFACodeType {\n  SMS = 'sms',\n  EMAIL = 'email',\n  SMARTCARD = 'sc',\n  WEBAUTHN = 'webauthn',\n  FINGER_VEIN = 'fv',\n  OTP = 'otp'\n}\n","/**\n * @packageDocumentation\n */\n\nimport {\n  browserSupportsWebAuthn,\n  browserSupportsWebAuthnAutofill,\n  platformAuthenticatorIsAvailable,\n  startAuthentication,\n  startRegistration\n} from '@simplewebauthn/browser';\n\nimport { AuthService, MFAService } from './auth';\n\nexport * from './http'\nexport * from './auth'\nexport * from './constants'\n\n/**\n * @public\n */\nexport {\n  startAuthentication as verifyDevice,\n  startRegistration as registerDevice,\n  platformAuthenticatorIsAvailable as isPlatformAuthenticatorAvailable,\n  browserSupportsWebAuthnAutofill as isWebAuthNAutofillSupported,\n  browserSupportsWebAuthn as isWebAuthNSupported\n}\n\n/**\n * Main class for initializing the library.\n *\n * @example\n *\n * ```js\n * const pa = new PlusAuthWeb(\"https://mytenant.plusauth.com\")\n *\n * // access auth methods from `auth` property\n * pa.auth.signIn({ username: ..., password: ...})\n *\n * // access MFA methods from `mfa` property\n * pa.mfa.validateCode('code', 'sms')\n * ```\n *\n * @public\n */\nexport class PlusAuthWeb {\n  /**\n   * @readonly\n   */\n  readonly auth: AuthService;\n\n  /**\n   * @readonly\n   */\n  readonly mfa: MFAService;\n\n  /**\n   * @param apiURL - Your PlusAuth tenant url. It must be a valid url.\n   */\n  constructor( apiURL: string ) {\n    try {\n      apiURL === '/' || new URL( apiURL )\n    } catch ( e ) {\n      throw new Error( '\"apiURL\" must be a valid URL' )\n    }\n    this.auth = new AuthService( apiURL )\n    this.mfa = new MFAService( apiURL )\n  }\n}\n\n"],"names":["utf8StringToBuffer","value","bufferToBase64URLString","buffer","bytes","str","charCode","base64URLStringToBuffer","base64URLString","base64","padLength","padded","binary","i","browserSupportsWebAuthn","toPublicKeyCredentialDescriptor","descriptor","id","isValidDomain","hostname","WebAuthnError","message","name","identifyRegistrationError","error","options","_a","_b","publicKey","param","effectiveDomain","WebAuthnAbortService","webauthnAbortService","startRegistration","creationOptionsJSON","credential","err","rawId","response","type","credentialJSON","bufferToUTF8String","browserSupportsWebAuthnAutofill","globalPublicKeyCredential","identifyAuthenticationError","startAuthentication","requestOptionsJSON","useBrowserAutofill","allowCredentials","userHandle","platformAuthenticatorIsAvailable","fetchAsPromise","url","resolve","reject","rawResponse","contentType","HttpService","apiURL","__publicField","http","method","args","fetchOptions","AuthService","baseURL","fields","strategy","email","password","hash","passwordRules","errors","min","max","number","lowerCase","upperCase","customChars","customRegexp","char","MFAService","code","codeType","MFACodeType","PlusAuthWeb"],"mappings":"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"}