{"version":3,"file":"plusauth-web.es.js","sources":["../node_modules/.pnpm/@simplewebauthn+browser@8.0.2/node_modules/@simplewebauthn/browser/dist/bundle/index.js","../src/http.ts","../src/auth/auth.ts","../src/auth/mfa.ts","../src/constants/mfa_code_type.ts","../src/index.ts"],"sourcesContent":["/* [@simplewebauthn/browser@8.0.2] */\nfunction utf8StringToBuffer(value) {\n    return new TextEncoder().encode(value);\n}\n\nfunction bufferToBase64URLString(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let str = '';\n    for (const charCode of bytes) {\n        str += String.fromCharCode(charCode);\n    }\n    const base64String = btoa(str);\n    return base64String.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nfunction base64URLStringToBuffer(base64URLString) {\n    const base64 = base64URLString.replace(/-/g, '+').replace(/_/g, '/');\n    const padLength = (4 - (base64.length % 4)) % 4;\n    const padded = base64.padEnd(base64.length + padLength, '=');\n    const binary = atob(padded);\n    const buffer = new ArrayBuffer(binary.length);\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return buffer;\n}\n\nfunction browserSupportsWebAuthn() {\n    return (window?.PublicKeyCredential !== undefined &&\n        typeof window.PublicKeyCredential === 'function');\n}\n\nfunction toPublicKeyCredentialDescriptor(descriptor) {\n    const { id } = descriptor;\n    return {\n        ...descriptor,\n        id: base64URLStringToBuffer(id),\n        transports: descriptor.transports,\n    };\n}\n\nfunction isValidDomain(hostname) {\n    return (hostname === 'localhost' ||\n        /^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$/i.test(hostname));\n}\n\nclass WebAuthnError extends Error {\n    constructor({ message, code, cause, name, }) {\n        super(message, { cause });\n        this.name = name ?? cause.name;\n        this.code = code;\n    }\n}\n\nfunction identifyRegistrationError({ error, options, }) {\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal instanceof AbortSignal) {\n            return new WebAuthnError({\n                message: 'Registration ceremony was sent an abort signal',\n                code: 'ERROR_CEREMONY_ABORTED',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'ConstraintError') {\n        if (publicKey.authenticatorSelection?.requireResidentKey === true) {\n            return new WebAuthnError({\n                message: 'Discoverable credentials were required but no available authenticator supported it',\n                code: 'ERROR_AUTHENTICATOR_MISSING_DISCOVERABLE_CREDENTIAL_SUPPORT',\n                cause: error,\n            });\n        }\n        else if (publicKey.authenticatorSelection?.userVerification === 'required') {\n            return new WebAuthnError({\n                message: 'User verification was required but no available authenticator supported it',\n                code: 'ERROR_AUTHENTICATOR_MISSING_USER_VERIFICATION_SUPPORT',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'InvalidStateError') {\n        return new WebAuthnError({\n            message: 'The authenticator was previously registered',\n            code: 'ERROR_AUTHENTICATOR_PREVIOUSLY_REGISTERED',\n            cause: error,\n        });\n    }\n    else if (error.name === 'NotAllowedError') {\n        return new WebAuthnError({\n            message: error.message,\n            code: 'ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY',\n            cause: error,\n        });\n    }\n    else if (error.name === 'NotSupportedError') {\n        const validPubKeyCredParams = publicKey.pubKeyCredParams.filter((param) => param.type === 'public-key');\n        if (validPubKeyCredParams.length === 0) {\n            return new WebAuthnError({\n                message: 'No entry in pubKeyCredParams was of type \"public-key\"',\n                code: 'ERROR_MALFORMED_PUBKEYCREDPARAMS',\n                cause: error,\n            });\n        }\n        return new WebAuthnError({\n            message: 'No available authenticator supported any of the specified pubKeyCredParams algorithms',\n            code: 'ERROR_AUTHENTICATOR_NO_SUPPORTED_PUBKEYCREDPARAMS_ALG',\n            cause: error,\n        });\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError({\n                message: `${window.location.hostname} is an invalid domain`,\n                code: 'ERROR_INVALID_DOMAIN',\n                cause: error,\n            });\n        }\n        else if (publicKey.rp.id !== effectiveDomain) {\n            return new WebAuthnError({\n                message: `The RP ID \"${publicKey.rp.id}\" is invalid for this domain`,\n                code: 'ERROR_INVALID_RP_ID',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'TypeError') {\n        if (publicKey.user.id.byteLength < 1 || publicKey.user.id.byteLength > 64) {\n            return new WebAuthnError({\n                message: 'User ID was not between 1 and 64 characters',\n                code: 'ERROR_INVALID_USER_ID_LENGTH',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError({\n            message: 'The authenticator was unable to process the specified options, or could not create a new credential',\n            code: 'ERROR_AUTHENTICATOR_GENERAL_ERROR',\n            cause: error,\n        });\n    }\n    return error;\n}\n\nclass WebAuthnAbortService {\n    createNewAbortSignal() {\n        if (this.controller) {\n            const abortError = new Error('Cancelling existing WebAuthn API call for new one');\n            abortError.name = 'AbortError';\n            this.controller.abort(abortError);\n        }\n        const newController = new AbortController();\n        this.controller = newController;\n        return newController.signal;\n    }\n}\nconst webauthnAbortService = new WebAuthnAbortService();\n\nconst attachments = ['cross-platform', 'platform'];\nfunction toAuthenticatorAttachment(attachment) {\n    if (!attachment) {\n        return;\n    }\n    if (attachments.indexOf(attachment) < 0) {\n        return;\n    }\n    return attachment;\n}\n\nasync function startRegistration(creationOptionsJSON) {\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    const publicKey = {\n        ...creationOptionsJSON,\n        challenge: base64URLStringToBuffer(creationOptionsJSON.challenge),\n        user: {\n            ...creationOptionsJSON.user,\n            id: utf8StringToBuffer(creationOptionsJSON.user.id),\n        },\n        excludeCredentials: creationOptionsJSON.excludeCredentials?.map(toPublicKeyCredentialDescriptor),\n    };\n    const options = { publicKey };\n    options.signal = webauthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.create(options));\n    }\n    catch (err) {\n        throw identifyRegistrationError({ error: err, options });\n    }\n    if (!credential) {\n        throw new Error('Registration was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let transports = undefined;\n    if (typeof response.getTransports === 'function') {\n        transports = response.getTransports();\n    }\n    let responsePublicKeyAlgorithm = undefined;\n    if (typeof response.getPublicKeyAlgorithm === 'function') {\n        responsePublicKeyAlgorithm = response.getPublicKeyAlgorithm();\n    }\n    let responsePublicKey = undefined;\n    if (typeof response.getPublicKey === 'function') {\n        const _publicKey = response.getPublicKey();\n        if (_publicKey !== null) {\n            responsePublicKey = bufferToBase64URLString(_publicKey);\n        }\n    }\n    let responseAuthenticatorData;\n    if (typeof response.getAuthenticatorData === 'function') {\n        responseAuthenticatorData = bufferToBase64URLString(response.getAuthenticatorData());\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            attestationObject: bufferToBase64URLString(response.attestationObject),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            transports,\n            publicKeyAlgorithm: responsePublicKeyAlgorithm,\n            publicKey: responsePublicKey,\n            authenticatorData: responseAuthenticatorData,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment),\n    };\n}\n\nfunction bufferToUTF8String(value) {\n    return new TextDecoder('utf-8').decode(value);\n}\n\nfunction browserSupportsWebAuthnAutofill() {\n    const globalPublicKeyCredential = window\n        .PublicKeyCredential;\n    if (globalPublicKeyCredential.isConditionalMediationAvailable === undefined) {\n        return new Promise((resolve) => resolve(false));\n    }\n    return globalPublicKeyCredential.isConditionalMediationAvailable();\n}\n\nfunction identifyAuthenticationError({ error, options, }) {\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal instanceof AbortSignal) {\n            return new WebAuthnError({\n                message: 'Authentication ceremony was sent an abort signal',\n                code: 'ERROR_CEREMONY_ABORTED',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'NotAllowedError') {\n        return new WebAuthnError({\n            message: error.message,\n            code: 'ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY',\n            cause: error,\n        });\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError({\n                message: `${window.location.hostname} is an invalid domain`,\n                code: 'ERROR_INVALID_DOMAIN',\n                cause: error,\n            });\n        }\n        else if (publicKey.rpId !== effectiveDomain) {\n            return new WebAuthnError({\n                message: `The RP ID \"${publicKey.rpId}\" is invalid for this domain`,\n                code: 'ERROR_INVALID_RP_ID',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError({\n            message: 'The authenticator was unable to process the specified options, or could not create a new assertion signature',\n            code: 'ERROR_AUTHENTICATOR_GENERAL_ERROR',\n            cause: error,\n        });\n    }\n    return error;\n}\n\nasync function startAuthentication(requestOptionsJSON, useBrowserAutofill = false) {\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    let allowCredentials;\n    if (requestOptionsJSON.allowCredentials?.length !== 0) {\n        allowCredentials = requestOptionsJSON.allowCredentials?.map(toPublicKeyCredentialDescriptor);\n    }\n    const publicKey = {\n        ...requestOptionsJSON,\n        challenge: base64URLStringToBuffer(requestOptionsJSON.challenge),\n        allowCredentials,\n    };\n    const options = {};\n    if (useBrowserAutofill) {\n        if (!(await browserSupportsWebAuthnAutofill())) {\n            throw Error('Browser does not support WebAuthn autofill');\n        }\n        const eligibleInputs = document.querySelectorAll('input[autocomplete*=\\'webauthn\\']');\n        if (eligibleInputs.length < 1) {\n            throw Error('No <input> with `\"webauthn\"` in its `autocomplete` attribute was detected');\n        }\n        options.mediation = 'conditional';\n        publicKey.allowCredentials = [];\n    }\n    options.publicKey = publicKey;\n    options.signal = webauthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.get(options));\n    }\n    catch (err) {\n        throw identifyAuthenticationError({ error: err, options });\n    }\n    if (!credential) {\n        throw new Error('Authentication was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let userHandle = undefined;\n    if (response.userHandle) {\n        userHandle = bufferToUTF8String(response.userHandle);\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            authenticatorData: bufferToBase64URLString(response.authenticatorData),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            signature: bufferToBase64URLString(response.signature),\n            userHandle,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment),\n    };\n}\n\nfunction platformAuthenticatorIsAvailable() {\n    if (!browserSupportsWebAuthn()) {\n        return new Promise((resolve) => resolve(false));\n    }\n    return PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n}\n\nexport { browserSupportsWebAuthn, browserSupportsWebAuthnAutofill, platformAuthenticatorIsAvailable, startAuthentication, startRegistration };\n","/**\n * @internal\n */\nfunction fetchAsPromise( url: string, options: RequestInit ) {\n  return new Promise( function ( resolve, reject ){\n    fetch( url, options ).then( rawResponse => {\n      const contentType = rawResponse.headers.get( 'content-type' )\n      if ( rawResponse.redirected && contentType && contentType.includes( 'html' ) ){\n        window.location.assign( rawResponse.url )\n        return false;\n      }\n      let response: any = null\n      rawResponse.text().then( value => {\n        if ( contentType && contentType.includes( 'json' ) ){\n          response = Object.assign( JSON.parse( value ), { _raw: rawResponse } )\n        } else {\n          response = { data: value, _raw: rawResponse }\n        }\n\n        // TODO: migrate to object response\n        // response.__proto__._raw = clone\n\n        if ( rawResponse.ok ){\n          resolve( response )\n        } else if ( rawResponse.status === 400\n                    && response.error === 'xhr_request'\n                    && response.location ){\n          window.location.replace( response.location );\n          return false;\n        } else {\n          reject( response )\n        }\n      } )\n    } ).catch( reject )\n  } )\n}\n\n/**\n * Helper service for posting requests. It is intended to be used internally.\n * @public\n */\nexport class HttpService {\n  /**\n   * @internal\n   */\n  http: any\n\n  ['constructor']!: typeof HttpService\n\n  constructor( apiURL: string, options?: Partial<RequestInit> ) {\n    const http: any = {};\n    ['get', 'post', 'patch', 'delete'].forEach( method => {\n      http[method] = function ( ...args: any[] ) {\n        const fetchOptions: RequestInit = Object.assign( {\n          method,\n          credentials: 'include',\n          mode:        'cors',\n        }, options || {} )\n\n        fetchOptions.headers = Object.assign( {\n          'Content-Type':     'application/json',\n          'Accept':           'application/json',\n          'X-Requested-With': 'XMLHttpRequest'\n        }, fetchOptions.headers || {} )\n\n        method !== 'get' ? fetchOptions.body = JSON.stringify( args[1] ) : null\n        if ( typeof args[0] !== 'string' ){\n          return fetchAsPromise.call( null, apiURL, fetchOptions )\n        } else {\n          return fetchAsPromise.call( null, apiURL + args[0], fetchOptions )\n        }\n      }\n    } )\n    this.http = http\n  }\n}\n","import { HttpService } from '../http';\n\n/**\n * Class containing authorization related methods.\n * @public\n */\nexport class AuthService extends HttpService {\n  /**\n   * @internal\n   */\n  constructor( baseURL: string ) {\n    super( baseURL );\n  }\n\n  /**\n   * Submits user credentials to the endpoint `/signin`.\n   *\n   * @param fields - Key/Value object for validating user.\n   * @param connection - PlusAuth strategy to check user. Make sure you have created this strategy\n   * in your tenant.\n   *\n   * @example\n   * Here is a simple usage.\n   * ```js\n   *  auth.signIn( { username: \"johndoe@example.com\", password: \"mypassword\" } )\n   * ```\n   *\n   * @example\n   * With different strategy.\n   * ```js\n   *  auth.signIn( { username: \"johndoe@example.com\", password: \"mypassword\" }, \"myLdapStrategy\" )\n   * ```\n   */\n  public signIn( fields: { [key: string]: any }, connection?: string ): Promise<any> {\n    return this.http.post( '/signin', { ...fields, connection } );\n  }\n\n  /**\n   * Submits user credentials to the endpoint `/signin`.\n   *\n   * @param method - Passwordless method. For ex. email or sms\n   * @param fields - Key/Value object for validating user.\n   * in your tenant.\n   *\n   * @example\n   * Sign in with email passwordless strategy\n   * ```js\n   *  auth.signInPasswordless( 'email', { code: \"123456\" } )\n   * ```\n   */\n  public signInPasswordless(\n    method: string | 'sms' | 'email' | 'otp',\n    fields: { [key: string]: any }\n  ): Promise<any> {\n    return this.http.post( `/signin/passwordless/${ method }`, fields );\n  }\n\n  /**\n   * Posts a request for registering a user.\n   *\n   * @param fields - Key/Value object containing user information.\n   * @param strategy - PlusAuth strategy to create the user for. Make sure you have created this\n   * strategy in your tenant.\n   *\n   * @example\n   * Here is a simple usage.\n   * ```\n   *  auth.signUp( { username: \"johndoe@example.com\", password: \"mypassword\" } )\n   * ```\n   *\n   * @example\n   * With phone number.\n   * ```\n   *  auth.signUp( { username: \"johndoe@example.com\", password: \"mypassword\", phone_number: '+11231212123' } )\n   * ```\n   *\n   * @example\n   * With different strategy.\n   * ```js\n   *  auth.signUp( { username: \"johndoe@example.com\", password: \"mypassword\" }, \"myLdapStrategy\" )\n   * ```\n   */\n  public signUp( fields: { [key: string]: any }, strategy?: string ): Promise<any> {\n    return this.http.post( '/signup', { ...fields, strategy } );\n  }\n\n  /**\n   * In some cases user may need to enter additional information for their profile. For example\n   * applications may force users to enter their phone number. `Fill Missing` view in PlusAuth\n   * uses this method to post the form.\n   *\n   * @param fields - Key/Value object containing user information\n   *\n   * @example\n   * ```js\n   * auth.updateMissingInformation({ phone_number: '+1222334455'})\n   * ```\n   */\n  public updateMissingInformation( fields: { [key: string]: any } ): Promise<any> {\n    return this.http.post( '/account/updateMissingInformation', fields );\n  }\n\n  /**\n   * Request password reset email. `Forgot Password` view in PlusAuth uses this method to post\n   * the form.\n   *\n   * @param email - Email of user requesting password reset.\n   *\n   * @example\n   * ```js\n   * auth.requestResetPassword('john@doe.com')\n   * ```\n   */\n  public requestResetPassword( email: string ): Promise<any> {\n    return this.http.post( '/account/forgotPassword', {\n      email,\n    } );\n  }\n\n  /**\n   * After clicking the reset password email, users will be delivered on a page which will\n   * request their new password. Use this method to post their new password and token from the\n   * url. If `Auto SignIn` is enabled in `Settings > Login` user will be redirected to `Tenant Login URL` automatically. `Reset Password` view in PlusAuth uses this method to submit the form.\n   *\n   * @param password - New password of user\n   * @param hash - Received token in the url\n   *\n   * @example\n   * ```js\n   * const pathParts = location.pathname.split('/')\n   * const token = pathParts[pathParts.length - 1];\n   *\n   * auth.resetPassword('NEW_PASSWORD', token).then(function(){\n   *   console.log('Password reset successfully')\n   * })\n   * ```\n   */\n  public resetPassword( password: string, hash: string ): Promise<any> {\n    return this.http.post( `/account/resetPassword/${ hash }`, {\n      password,\n    } );\n  }\n\n\n  /**\n   * Allow applications to access displayed user information. When third-party applications\n   * request to access user information they need the consent of the end user. This method will\n   * allow the 3rd party application to receive the information. `Allow` button in `Consent`\n   * view uses this method.\n   *\n   * @example\n   * ```js\n   * auth.acceptConsent()\n   * ```\n   */\n  public acceptConsent(): Promise<any> {\n    return this.http.post( '/signin/consent/confirm' );\n  }\n\n\n  /**\n   * Forbid applications to access displayed user information. When third-party applications\n   * request to access user information they need the consent of the end user. This method will\n   * reject the 3rd party application's request to receive the information. `Reject` button in\n   * `Consent` view uses this method.\n   *\n   * @example\n   * ```js\n   * auth.rejectConsent()\n   * ```\n   */\n  public rejectConsent(): Promise<any> {\n    return this.http.get( '/signin/consent/reject' );\n  }\n\n  /**\n   * Helper method for checking password strength for rules defined in PlusAuth. This method\n   * would be useful in SignUp and ResetPassword views.\n   *\n   * @param value - Password to check\n   * @param passwordRules - Object containing password rules\n   *\n   * @example\n   * ```js\n   * const password = '123'\n   * const passwordRules = window.PlusAuth.passwordPolicy\n   *\n   * const passwordStrength = auth.checkPasswordStrength(password, passwordRules)\n   *\n   * if( passwordStrength === true ){\n   *   console.log('password is strong enough')\n   * } else {\n   *   console.log('Password is not strong enough', passwordStrength)\n   * }\n   * ```\n   */\n  public checkPasswordStrength( value: string, passwordRules: any = {} ): any {\n    value = value ?? '';\n    const errors: any = {};\n    // eslint-disable-next-line prefer-const\n    let { min, max, number, lowerCase, upperCase, customChars, customRegexp } = passwordRules;\n\n    lowerCase = Number( lowerCase );\n    upperCase = Number( upperCase );\n    number = Number( number );\n    if (\n      lowerCase &&\n      !new RegExp( `(?=(.*[a-z])${ lowerCase > 0 ? `{${ lowerCase },}` : '' })` ).test( value )\n    ) {\n      errors.lowerCase = true;\n    }\n    if (\n      upperCase &&\n      !new RegExp(\n        `(?=(.*[A-Z])${ upperCase > 0 ? `{${ upperCase },}` : '' })`\n      ).test( value )\n    ) {\n      errors.upperCase = true;\n    }\n    if (\n      number &&\n      !new RegExp(\n        `(?=(.*[0-9])${ number > 0 ? `{${ number },}` : '' })`\n      ).test( value )\n    ) {\n      errors.number = true;\n    }\n    if ( min != null && value.length < min ) {\n      errors.min = true;\n    }\n    if ( max != null && value.length > max ) {\n      errors.max = true;\n    }\n    if ( customChars &&\n      !customChars.split( '' ).some( ( char: string ) => value.indexOf( char ) > -1 )\n    ) {\n      errors.customChars = true;\n    }\n\n    if ( customRegexp && customRegexp.value ) {\n      if ( !new RegExp( customRegexp ).test( customRegexp.value ) ) {\n        return customRegexp.message || ' ';\n      }\n    }\n\n    return Object.keys( errors ).length > 0 ? errors : true;\n  }\n}\n","import { MFACodeType } from '../constants';\nimport { HttpService } from '../http';\n\n/**\n * Class containing Multi Factor Authorization related methods.\n * @public\n */\nexport class MFAService extends HttpService {\n  /**\n   * @internal\n   */\n  constructor( baseURL: string ) {\n    super( baseURL );\n  }\n\n  /**\n   * Submit user provided code for validation.\n   *\n   * @param code - User provided code\n   * @param codeType - Method of MFA\n   *\n   * @example\n   * Validate SMS code.\n   * ```js\n   * mfa.validateCode('123456', MFACodeType.SMS).catch( function(err){\n   *   console.error('Code is not valid', err)\n   * })\n   * ```\n   *\n   * @example\n   * Validate Email code.\n   * ```js\n   * mfa.validateCode('123456', MFACodeType.EMAIL).catch( function(err){\n   *   console.error('Code is not valid', err)\n   * })\n   * ```\n   *\n   * @example\n   * Validate OTP code.\n   * ```js\n   * mfa.validateCode('123456', MFACodeType.OTP).catch( function(err){\n   *   console.error('Code is not valid', err)\n   * })\n   *```\n   *\n   * @example\n   * Register WebAuthN device.\n   * ```js\n   * PlusAuthWeb.registerDevice(window.PlusAuth.details.registration_options)\n   * .then(function(deviceRegistrationResult){\n   *    mfa.validateCode(deviceRegistrationResult, MFACodeType.WEBAUTHN).catch( function(err){\n   *      console.error('Registration failed', err)\n   *    })\n   * })\n   *```\n   *\n   * @example\n   * Verify WebAuthN device.\n   * ```js\n   * PlusAuthWeb.verify_device(window.PlusAuth.details.authentication_options)\n   * .then(function(deviceVerificationResult){\n   *    mfa.validateCode(deviceVerificationResult, MFACodeType.WEBAUTHN).catch( function(err){\n   *      console.error('Verification failed', err)\n   *    })\n   * })\n   * ```\n   */\n  public async validateCode(\n    codeType: MFACodeType.WEBAUTHN,\n    code: Record<string, any>,\n  ): Promise<any>;\n\n  public async validateCode(\n    codeType: Exclude<MFACodeType, MFACodeType.WEBAUTHN>,\n    code: string,\n  ): Promise<any>;\n\n  public async validateCode(\n    codeType: MFACodeType,\n    code: string | Record<string, any>,\n  ): Promise<any> {\n    return this.http.post( `/signin/challenge/${ codeType }`, {\n      code\n    } );\n  }\n}\n","/**\n * @packageDocumentation\n * @module Constants\n */\n\n/**\n * Code types to be used in Multi-Factor Authentication\n *\n * @public\n */\nexport enum MFACodeType {\n  SMS = 'sms',\n  EMAIL = 'email',\n  SMARTCARD = 'sc',\n  WEBAUTHN = 'webauthn',\n  FINGER_VEIN = 'fv',\n  OTP = 'otp'\n}\n","/**\n * @packageDocumentation\n */\n\nimport {\n  browserSupportsWebAuthn,\n  browserSupportsWebAuthnAutofill,\n  platformAuthenticatorIsAvailable,\n  startAuthentication,\n  startRegistration\n} from '@simplewebauthn/browser';\n\nimport { AuthService, MFAService } from './auth';\n\nexport * from './http'\nexport * from './auth'\nexport * from './constants'\n\n/**\n * @public\n */\nexport {\n  startAuthentication as verifyDevice,\n  startRegistration as registerDevice,\n  platformAuthenticatorIsAvailable as isPlatformAuthenticatorAvailable,\n  browserSupportsWebAuthnAutofill as isWebAuthNAutofillSupported,\n  browserSupportsWebAuthn as isWebAuthNSupported\n}\n\n/**\n * Main class for initializing the library.\n *\n * @example\n *\n * ```js\n * const pa = new PlusAuthWeb(\"https://mytenant.plusauth.com\")\n *\n * // access auth methods from `auth` property\n * pa.auth.signIn({ username: ..., password: ...})\n *\n * // access MFA methods from `mfa` property\n * pa.mfa.validateCode('code', 'sms')\n * ```\n *\n * @public\n */\nexport class PlusAuthWeb {\n  /**\n   * @readonly\n   */\n  readonly auth: AuthService;\n\n  /**\n   * @readonly\n   */\n  readonly mfa: MFAService;\n\n  /**\n   * @param apiURL - Your PlusAuth tenant url. It must be a valid url.\n   */\n  constructor( apiURL: string ) {\n    try {\n      apiURL === '/' || new URL( apiURL )\n    } catch ( e ) {\n      throw new Error( '\"apiURL\" must be a valid URL' )\n    }\n    this.auth = new AuthService( apiURL )\n    this.mfa = new MFAService( apiURL )\n  }\n}\n\n"],"names":["utf8StringToBuffer","value","bufferToBase64URLString","buffer","bytes","str","charCode","base64URLStringToBuffer","base64URLString","base64","padLength","padded","binary","i","browserSupportsWebAuthn","toPublicKeyCredentialDescriptor","descriptor","id","isValidDomain","hostname","WebAuthnError","message","code","cause","name","identifyRegistrationError","error","options","_a","_b","publicKey","param","effectiveDomain","WebAuthnAbortService","abortError","newController","webauthnAbortService","attachments","toAuthenticatorAttachment","attachment","startRegistration","creationOptionsJSON","credential","err","rawId","response","type","transports","responsePublicKeyAlgorithm","responsePublicKey","_publicKey","responseAuthenticatorData","bufferToUTF8String","browserSupportsWebAuthnAutofill","globalPublicKeyCredential","resolve","identifyAuthenticationError","startAuthentication","requestOptionsJSON","useBrowserAutofill","allowCredentials","userHandle","platformAuthenticatorIsAvailable","fetchAsPromise","url","reject","rawResponse","contentType","HttpService","apiURL","http","method","args","fetchOptions","AuthService","baseURL","fields","connection","strategy","email","password","hash","passwordRules","errors","min","max","number","lowerCase","upperCase","customChars","customRegexp","char","MFAService","codeType","MFACodeType","PlusAuthWeb"],"mappings":"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","x_google_ignoreList":[0]}