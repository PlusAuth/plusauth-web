{"version":3,"file":"plusauth-web.umd.js","sources":["../node_modules/.pnpm/@simplewebauthn+browser@8.0.2/node_modules/@simplewebauthn/browser/dist/bundle/index.js","../src/http.ts","../src/auth/auth.ts","../src/auth/mfa.ts","../src/constants/mfa_code_type.ts","../src/index.ts"],"sourcesContent":["/* [@simplewebauthn/browser@8.0.2] */\nfunction utf8StringToBuffer(value) {\n    return new TextEncoder().encode(value);\n}\n\nfunction bufferToBase64URLString(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let str = '';\n    for (const charCode of bytes) {\n        str += String.fromCharCode(charCode);\n    }\n    const base64String = btoa(str);\n    return base64String.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nfunction base64URLStringToBuffer(base64URLString) {\n    const base64 = base64URLString.replace(/-/g, '+').replace(/_/g, '/');\n    const padLength = (4 - (base64.length % 4)) % 4;\n    const padded = base64.padEnd(base64.length + padLength, '=');\n    const binary = atob(padded);\n    const buffer = new ArrayBuffer(binary.length);\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return buffer;\n}\n\nfunction browserSupportsWebAuthn() {\n    return (window?.PublicKeyCredential !== undefined &&\n        typeof window.PublicKeyCredential === 'function');\n}\n\nfunction toPublicKeyCredentialDescriptor(descriptor) {\n    const { id } = descriptor;\n    return {\n        ...descriptor,\n        id: base64URLStringToBuffer(id),\n        transports: descriptor.transports,\n    };\n}\n\nfunction isValidDomain(hostname) {\n    return (hostname === 'localhost' ||\n        /^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$/i.test(hostname));\n}\n\nclass WebAuthnError extends Error {\n    constructor({ message, code, cause, name, }) {\n        super(message, { cause });\n        this.name = name ?? cause.name;\n        this.code = code;\n    }\n}\n\nfunction identifyRegistrationError({ error, options, }) {\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal instanceof AbortSignal) {\n            return new WebAuthnError({\n                message: 'Registration ceremony was sent an abort signal',\n                code: 'ERROR_CEREMONY_ABORTED',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'ConstraintError') {\n        if (publicKey.authenticatorSelection?.requireResidentKey === true) {\n            return new WebAuthnError({\n                message: 'Discoverable credentials were required but no available authenticator supported it',\n                code: 'ERROR_AUTHENTICATOR_MISSING_DISCOVERABLE_CREDENTIAL_SUPPORT',\n                cause: error,\n            });\n        }\n        else if (publicKey.authenticatorSelection?.userVerification === 'required') {\n            return new WebAuthnError({\n                message: 'User verification was required but no available authenticator supported it',\n                code: 'ERROR_AUTHENTICATOR_MISSING_USER_VERIFICATION_SUPPORT',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'InvalidStateError') {\n        return new WebAuthnError({\n            message: 'The authenticator was previously registered',\n            code: 'ERROR_AUTHENTICATOR_PREVIOUSLY_REGISTERED',\n            cause: error,\n        });\n    }\n    else if (error.name === 'NotAllowedError') {\n        return new WebAuthnError({\n            message: error.message,\n            code: 'ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY',\n            cause: error,\n        });\n    }\n    else if (error.name === 'NotSupportedError') {\n        const validPubKeyCredParams = publicKey.pubKeyCredParams.filter((param) => param.type === 'public-key');\n        if (validPubKeyCredParams.length === 0) {\n            return new WebAuthnError({\n                message: 'No entry in pubKeyCredParams was of type \"public-key\"',\n                code: 'ERROR_MALFORMED_PUBKEYCREDPARAMS',\n                cause: error,\n            });\n        }\n        return new WebAuthnError({\n            message: 'No available authenticator supported any of the specified pubKeyCredParams algorithms',\n            code: 'ERROR_AUTHENTICATOR_NO_SUPPORTED_PUBKEYCREDPARAMS_ALG',\n            cause: error,\n        });\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError({\n                message: `${window.location.hostname} is an invalid domain`,\n                code: 'ERROR_INVALID_DOMAIN',\n                cause: error,\n            });\n        }\n        else if (publicKey.rp.id !== effectiveDomain) {\n            return new WebAuthnError({\n                message: `The RP ID \"${publicKey.rp.id}\" is invalid for this domain`,\n                code: 'ERROR_INVALID_RP_ID',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'TypeError') {\n        if (publicKey.user.id.byteLength < 1 || publicKey.user.id.byteLength > 64) {\n            return new WebAuthnError({\n                message: 'User ID was not between 1 and 64 characters',\n                code: 'ERROR_INVALID_USER_ID_LENGTH',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError({\n            message: 'The authenticator was unable to process the specified options, or could not create a new credential',\n            code: 'ERROR_AUTHENTICATOR_GENERAL_ERROR',\n            cause: error,\n        });\n    }\n    return error;\n}\n\nclass WebAuthnAbortService {\n    createNewAbortSignal() {\n        if (this.controller) {\n            const abortError = new Error('Cancelling existing WebAuthn API call for new one');\n            abortError.name = 'AbortError';\n            this.controller.abort(abortError);\n        }\n        const newController = new AbortController();\n        this.controller = newController;\n        return newController.signal;\n    }\n}\nconst webauthnAbortService = new WebAuthnAbortService();\n\nconst attachments = ['cross-platform', 'platform'];\nfunction toAuthenticatorAttachment(attachment) {\n    if (!attachment) {\n        return;\n    }\n    if (attachments.indexOf(attachment) < 0) {\n        return;\n    }\n    return attachment;\n}\n\nasync function startRegistration(creationOptionsJSON) {\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    const publicKey = {\n        ...creationOptionsJSON,\n        challenge: base64URLStringToBuffer(creationOptionsJSON.challenge),\n        user: {\n            ...creationOptionsJSON.user,\n            id: utf8StringToBuffer(creationOptionsJSON.user.id),\n        },\n        excludeCredentials: creationOptionsJSON.excludeCredentials?.map(toPublicKeyCredentialDescriptor),\n    };\n    const options = { publicKey };\n    options.signal = webauthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.create(options));\n    }\n    catch (err) {\n        throw identifyRegistrationError({ error: err, options });\n    }\n    if (!credential) {\n        throw new Error('Registration was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let transports = undefined;\n    if (typeof response.getTransports === 'function') {\n        transports = response.getTransports();\n    }\n    let responsePublicKeyAlgorithm = undefined;\n    if (typeof response.getPublicKeyAlgorithm === 'function') {\n        responsePublicKeyAlgorithm = response.getPublicKeyAlgorithm();\n    }\n    let responsePublicKey = undefined;\n    if (typeof response.getPublicKey === 'function') {\n        const _publicKey = response.getPublicKey();\n        if (_publicKey !== null) {\n            responsePublicKey = bufferToBase64URLString(_publicKey);\n        }\n    }\n    let responseAuthenticatorData;\n    if (typeof response.getAuthenticatorData === 'function') {\n        responseAuthenticatorData = bufferToBase64URLString(response.getAuthenticatorData());\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            attestationObject: bufferToBase64URLString(response.attestationObject),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            transports,\n            publicKeyAlgorithm: responsePublicKeyAlgorithm,\n            publicKey: responsePublicKey,\n            authenticatorData: responseAuthenticatorData,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment),\n    };\n}\n\nfunction bufferToUTF8String(value) {\n    return new TextDecoder('utf-8').decode(value);\n}\n\nfunction browserSupportsWebAuthnAutofill() {\n    const globalPublicKeyCredential = window\n        .PublicKeyCredential;\n    if (globalPublicKeyCredential.isConditionalMediationAvailable === undefined) {\n        return new Promise((resolve) => resolve(false));\n    }\n    return globalPublicKeyCredential.isConditionalMediationAvailable();\n}\n\nfunction identifyAuthenticationError({ error, options, }) {\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal instanceof AbortSignal) {\n            return new WebAuthnError({\n                message: 'Authentication ceremony was sent an abort signal',\n                code: 'ERROR_CEREMONY_ABORTED',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'NotAllowedError') {\n        return new WebAuthnError({\n            message: error.message,\n            code: 'ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY',\n            cause: error,\n        });\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError({\n                message: `${window.location.hostname} is an invalid domain`,\n                code: 'ERROR_INVALID_DOMAIN',\n                cause: error,\n            });\n        }\n        else if (publicKey.rpId !== effectiveDomain) {\n            return new WebAuthnError({\n                message: `The RP ID \"${publicKey.rpId}\" is invalid for this domain`,\n                code: 'ERROR_INVALID_RP_ID',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError({\n            message: 'The authenticator was unable to process the specified options, or could not create a new assertion signature',\n            code: 'ERROR_AUTHENTICATOR_GENERAL_ERROR',\n            cause: error,\n        });\n    }\n    return error;\n}\n\nasync function startAuthentication(requestOptionsJSON, useBrowserAutofill = false) {\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    let allowCredentials;\n    if (requestOptionsJSON.allowCredentials?.length !== 0) {\n        allowCredentials = requestOptionsJSON.allowCredentials?.map(toPublicKeyCredentialDescriptor);\n    }\n    const publicKey = {\n        ...requestOptionsJSON,\n        challenge: base64URLStringToBuffer(requestOptionsJSON.challenge),\n        allowCredentials,\n    };\n    const options = {};\n    if (useBrowserAutofill) {\n        if (!(await browserSupportsWebAuthnAutofill())) {\n            throw Error('Browser does not support WebAuthn autofill');\n        }\n        const eligibleInputs = document.querySelectorAll('input[autocomplete*=\\'webauthn\\']');\n        if (eligibleInputs.length < 1) {\n            throw Error('No <input> with `\"webauthn\"` in its `autocomplete` attribute was detected');\n        }\n        options.mediation = 'conditional';\n        publicKey.allowCredentials = [];\n    }\n    options.publicKey = publicKey;\n    options.signal = webauthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.get(options));\n    }\n    catch (err) {\n        throw identifyAuthenticationError({ error: err, options });\n    }\n    if (!credential) {\n        throw new Error('Authentication was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let userHandle = undefined;\n    if (response.userHandle) {\n        userHandle = bufferToUTF8String(response.userHandle);\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            authenticatorData: bufferToBase64URLString(response.authenticatorData),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            signature: bufferToBase64URLString(response.signature),\n            userHandle,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment),\n    };\n}\n\nfunction platformAuthenticatorIsAvailable() {\n    if (!browserSupportsWebAuthn()) {\n        return new Promise((resolve) => resolve(false));\n    }\n    return PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n}\n\nexport { browserSupportsWebAuthn, browserSupportsWebAuthnAutofill, platformAuthenticatorIsAvailable, startAuthentication, startRegistration };\n","/**\n * @internal\n */\nfunction fetchAsPromise( url: string, options: RequestInit ) {\n  return new Promise( function ( resolve, reject ){\n    fetch( url, options ).then( rawResponse => {\n      const contentType = rawResponse.headers.get( 'content-type' )\n      if ( rawResponse.redirected && contentType && contentType.includes( 'html' ) ){\n        window.location.assign( rawResponse.url )\n        return false;\n      }\n      let response: any = null\n      rawResponse.text().then( value => {\n        if ( contentType && contentType.includes( 'json' ) ){\n          response = Object.assign( JSON.parse( value ), { _raw: rawResponse } )\n        } else {\n          response = { data: value, _raw: rawResponse }\n        }\n\n        // TODO: migrate to object response\n        // response.__proto__._raw = clone\n\n        if ( rawResponse.ok ){\n          resolve( response )\n        } else if ( rawResponse.status === 400\n                    && response.error === 'xhr_request'\n                    && response.location ){\n          window.location.replace( response.location );\n          return false;\n        } else {\n          reject( response )\n        }\n      } )\n    } ).catch( reject )\n  } )\n}\n\n/**\n * Helper service for posting requests. It is intended to be used internally.\n * @public\n */\nexport class HttpService {\n  /**\n   * @internal\n   */\n  http: any\n\n  ['constructor']!: typeof HttpService\n\n  constructor( apiURL: string, options?: Partial<RequestInit> ) {\n    const http: any = {};\n    ['get', 'post', 'patch', 'delete'].forEach( method => {\n      http[method] = function ( ...args: any[] ) {\n        const fetchOptions: RequestInit = Object.assign( {\n          method,\n          credentials: 'include',\n          mode:        'cors',\n        }, options || {} )\n\n        fetchOptions.headers = Object.assign( {\n          'Content-Type':     'application/json',\n          'Accept':           'application/json',\n          'X-Requested-With': 'XMLHttpRequest'\n        }, fetchOptions.headers || {} )\n\n        method !== 'get' ? fetchOptions.body = JSON.stringify( args[1] ) : null\n        if ( typeof args[0] !== 'string' ){\n          return fetchAsPromise.call( null, apiURL, fetchOptions )\n        } else {\n          return fetchAsPromise.call( null, apiURL + args[0], fetchOptions )\n        }\n      }\n    } )\n    this.http = http\n  }\n}\n","import { HttpService } from '../http';\n\n/**\n * Class containing authorization related methods.\n * @public\n */\nexport class AuthService extends HttpService {\n  /**\n   * @internal\n   */\n  constructor( baseURL: string ) {\n    super( baseURL );\n  }\n\n  /**\n   * Submits user credentials to the endpoint `/signin`.\n   *\n   * @param fields - Key/Value object for validating user.\n   * @param connection - PlusAuth strategy to check user. Make sure you have created this strategy\n   * in your tenant.\n   *\n   * @example\n   * Here is a simple usage.\n   * ```js\n   *  auth.signIn( { username: \"johndoe@example.com\", password: \"mypassword\" } )\n   * ```\n   *\n   * @example\n   * With different strategy.\n   * ```js\n   *  auth.signIn( { username: \"johndoe@example.com\", password: \"mypassword\" }, \"myLdapStrategy\" )\n   * ```\n   */\n  public signIn( fields: { [key: string]: any }, connection?: string ): Promise<any> {\n    return this.http.post( '/signin', { ...fields, connection } );\n  }\n\n  /**\n   * Submits user credentials to the endpoint `/signin`.\n   *\n   * @param method - Passwordless method. For ex. email or sms\n   * @param fields - Key/Value object for validating user.\n   * in your tenant.\n   *\n   * @example\n   * Sign in with email passwordless strategy\n   * ```js\n   *  auth.signInPasswordless( 'email', { code: \"123456\" } )\n   * ```\n   */\n  public signInPasswordless(\n    method: string | 'sms' | 'email' | 'otp',\n    fields: { [key: string]: any }\n  ): Promise<any> {\n    return this.http.post( `/signin/passwordless/${ method }`, fields );\n  }\n\n  /**\n   * Posts a request for registering a user.\n   *\n   * @param fields - Key/Value object containing user information.\n   * @param strategy - PlusAuth strategy to create the user for. Make sure you have created this\n   * strategy in your tenant.\n   *\n   * @example\n   * Here is a simple usage.\n   * ```\n   *  auth.signUp( { username: \"johndoe@example.com\", password: \"mypassword\" } )\n   * ```\n   *\n   * @example\n   * With phone number.\n   * ```\n   *  auth.signUp( { username: \"johndoe@example.com\", password: \"mypassword\", phone_number: '+11231212123' } )\n   * ```\n   *\n   * @example\n   * With different strategy.\n   * ```js\n   *  auth.signUp( { username: \"johndoe@example.com\", password: \"mypassword\" }, \"myLdapStrategy\" )\n   * ```\n   */\n  public signUp( fields: { [key: string]: any }, strategy?: string ): Promise<any> {\n    return this.http.post( '/signup', { ...fields, strategy } );\n  }\n\n  /**\n   * In some cases user may need to enter additional information for their profile. For example\n   * applications may force users to enter their phone number. `Fill Missing` view in PlusAuth\n   * uses this method to post the form.\n   *\n   * @param fields - Key/Value object containing user information\n   *\n   * @example\n   * ```js\n   * auth.updateMissingInformation({ phone_number: '+1222334455'})\n   * ```\n   */\n  public updateMissingInformation( fields: { [key: string]: any } ): Promise<any> {\n    return this.http.post( '/account/updateMissingInformation', fields );\n  }\n\n  /**\n   * Request password reset email. `Forgot Password` view in PlusAuth uses this method to post\n   * the form.\n   *\n   * @param email - Email of user requesting password reset.\n   *\n   * @example\n   * ```js\n   * auth.requestResetPassword('john@doe.com')\n   * ```\n   */\n  public requestResetPassword( email: string ): Promise<any> {\n    return this.http.post( '/account/forgotPassword', {\n      email,\n    } );\n  }\n\n  /**\n   * After clicking the reset password email, users will be delivered on a page which will\n   * request their new password. Use this method to post their new password and token from the\n   * url. If `Auto SignIn` is enabled in `Settings > Login` user will be redirected to `Tenant Login URL` automatically. `Reset Password` view in PlusAuth uses this method to submit the form.\n   *\n   * @param password - New password of user\n   * @param hash - Received token in the url\n   *\n   * @example\n   * ```js\n   * const pathParts = location.pathname.split('/')\n   * const token = pathParts[pathParts.length - 1];\n   *\n   * auth.resetPassword('NEW_PASSWORD', token).then(function(){\n   *   console.log('Password reset successfully')\n   * })\n   * ```\n   */\n  public resetPassword( password: string, hash: string ): Promise<any> {\n    return this.http.post( `/account/resetPassword/${ hash }`, {\n      password,\n    } );\n  }\n\n\n  /**\n   * Allow applications to access displayed user information. When third-party applications\n   * request to access user information they need the consent of the end user. This method will\n   * allow the 3rd party application to receive the information. `Allow` button in `Consent`\n   * view uses this method.\n   *\n   * @example\n   * ```js\n   * auth.acceptConsent()\n   * ```\n   */\n  public acceptConsent(): Promise<any> {\n    return this.http.post( '/signin/consent/confirm' );\n  }\n\n\n  /**\n   * Forbid applications to access displayed user information. When third-party applications\n   * request to access user information they need the consent of the end user. This method will\n   * reject the 3rd party application's request to receive the information. `Reject` button in\n   * `Consent` view uses this method.\n   *\n   * @example\n   * ```js\n   * auth.rejectConsent()\n   * ```\n   */\n  public rejectConsent(): Promise<any> {\n    return this.http.get( '/signin/consent/reject' );\n  }\n\n  /**\n   * Helper method for checking password strength for rules defined in PlusAuth. This method\n   * would be useful in SignUp and ResetPassword views.\n   *\n   * @param value - Password to check\n   * @param passwordRules - Object containing password rules\n   *\n   * @example\n   * ```js\n   * const password = '123'\n   * const passwordRules = window.PlusAuth.passwordPolicy\n   *\n   * const passwordStrength = auth.checkPasswordStrength(password, passwordRules)\n   *\n   * if( passwordStrength === true ){\n   *   console.log('password is strong enough')\n   * } else {\n   *   console.log('Password is not strong enough', passwordStrength)\n   * }\n   * ```\n   */\n  public checkPasswordStrength( value: string, passwordRules: any = {} ): any {\n    value = value ?? '';\n    const errors: any = {};\n    // eslint-disable-next-line prefer-const\n    let { min, max, number, lowerCase, upperCase, customChars, customRegexp } = passwordRules;\n\n    lowerCase = Number( lowerCase );\n    upperCase = Number( upperCase );\n    number = Number( number );\n    if (\n      lowerCase &&\n      !new RegExp( `(?=(.*[a-z])${ lowerCase > 0 ? `{${ lowerCase },}` : '' })` ).test( value )\n    ) {\n      errors.lowerCase = true;\n    }\n    if (\n      upperCase &&\n      !new RegExp(\n        `(?=(.*[A-Z])${ upperCase > 0 ? `{${ upperCase },}` : '' })`\n      ).test( value )\n    ) {\n      errors.upperCase = true;\n    }\n    if (\n      number &&\n      !new RegExp(\n        `(?=(.*[0-9])${ number > 0 ? `{${ number },}` : '' })`\n      ).test( value )\n    ) {\n      errors.number = true;\n    }\n    if ( min != null && value.length < min ) {\n      errors.min = true;\n    }\n    if ( max != null && value.length > max ) {\n      errors.max = true;\n    }\n    if ( customChars &&\n      !customChars.split( '' ).some( ( char: string ) => value.indexOf( char ) > -1 )\n    ) {\n      errors.customChars = true;\n    }\n\n    if ( customRegexp && customRegexp.value ) {\n      if ( !new RegExp( customRegexp ).test( customRegexp.value ) ) {\n        return customRegexp.message || ' ';\n      }\n    }\n\n    return Object.keys( errors ).length > 0 ? errors : true;\n  }\n}\n","import { MFACodeType } from '../constants';\nimport { HttpService } from '../http';\n\n/**\n * Class containing Multi Factor Authorization related methods.\n * @public\n */\nexport class MFAService extends HttpService {\n  /**\n   * @internal\n   */\n  constructor( baseURL: string ) {\n    super( baseURL );\n  }\n\n  /**\n   * Submit user provided code for validation.\n   *\n   * @param code - User provided code\n   * @param codeType - Method of MFA\n   *\n   * @example\n   * Validate SMS code.\n   * ```js\n   * mfa.validateCode('123456', MFACodeType.SMS).catch( function(err){\n   *   console.error('Code is not valid', err)\n   * })\n   * ```\n   *\n   * @example\n   * Validate Email code.\n   * ```js\n   * mfa.validateCode('123456', MFACodeType.EMAIL).catch( function(err){\n   *   console.error('Code is not valid', err)\n   * })\n   * ```\n   *\n   * @example\n   * Validate OTP code.\n   * ```js\n   * mfa.validateCode('123456', MFACodeType.OTP).catch( function(err){\n   *   console.error('Code is not valid', err)\n   * })\n   *```\n   *\n   * @example\n   * Register WebAuthN device.\n   * ```js\n   * PlusAuthWeb.registerDevice(window.PlusAuth.details.registration_options)\n   * .then(function(deviceRegistrationResult){\n   *    mfa.validateCode(deviceRegistrationResult, MFACodeType.WEBAUTHN).catch( function(err){\n   *      console.error('Registration failed', err)\n   *    })\n   * })\n   *```\n   *\n   * @example\n   * Verify WebAuthN device.\n   * ```js\n   * PlusAuthWeb.verify_device(window.PlusAuth.details.authentication_options)\n   * .then(function(deviceVerificationResult){\n   *    mfa.validateCode(deviceVerificationResult, MFACodeType.WEBAUTHN).catch( function(err){\n   *      console.error('Verification failed', err)\n   *    })\n   * })\n   * ```\n   */\n  public async validateCode(\n    codeType: MFACodeType.WEBAUTHN,\n    code: Record<string, any>,\n  ): Promise<any>;\n\n  public async validateCode(\n    codeType: Exclude<MFACodeType, MFACodeType.WEBAUTHN>,\n    code: string,\n  ): Promise<any>;\n\n  public async validateCode(\n    codeType: MFACodeType,\n    code: string | Record<string, any>,\n  ): Promise<any> {\n    return this.http.post( `/signin/challenge/${ codeType }`, {\n      code\n    } );\n  }\n}\n","/**\n * @packageDocumentation\n * @module Constants\n */\n\n/**\n * Code types to be used in Multi-Factor Authentication\n *\n * @public\n */\nexport enum MFACodeType {\n  SMS = 'sms',\n  EMAIL = 'email',\n  SMARTCARD = 'sc',\n  WEBAUTHN = 'webauthn',\n  FINGER_VEIN = 'fv',\n  OTP = 'otp'\n}\n","/**\n * @packageDocumentation\n */\n\nimport {\n  browserSupportsWebAuthn,\n  browserSupportsWebAuthnAutofill,\n  platformAuthenticatorIsAvailable,\n  startAuthentication,\n  startRegistration\n} from '@simplewebauthn/browser';\n\nimport { AuthService, MFAService } from './auth';\n\nexport * from './http'\nexport * from './auth'\nexport * from './constants'\n\n/**\n * @public\n */\nexport {\n  startAuthentication as verifyDevice,\n  startRegistration as registerDevice,\n  platformAuthenticatorIsAvailable as isPlatformAuthenticatorAvailable,\n  browserSupportsWebAuthnAutofill as isWebAuthNAutofillSupported,\n  browserSupportsWebAuthn as isWebAuthNSupported\n}\n\n/**\n * Main class for initializing the library.\n *\n * @example\n *\n * ```js\n * const pa = new PlusAuthWeb(\"https://mytenant.plusauth.com\")\n *\n * // access auth methods from `auth` property\n * pa.auth.signIn({ username: ..., password: ...})\n *\n * // access MFA methods from `mfa` property\n * pa.mfa.validateCode('code', 'sms')\n * ```\n *\n * @public\n */\nexport class PlusAuthWeb {\n  /**\n   * @readonly\n   */\n  readonly auth: AuthService;\n\n  /**\n   * @readonly\n   */\n  readonly mfa: MFAService;\n\n  /**\n   * @param apiURL - Your PlusAuth tenant url. It must be a valid url.\n   */\n  constructor( apiURL: string ) {\n    try {\n      apiURL === '/' || new URL( apiURL )\n    } catch ( e ) {\n      throw new Error( '\"apiURL\" must be a valid URL' )\n    }\n    this.auth = new AuthService( apiURL )\n    this.mfa = new MFAService( apiURL )\n  }\n}\n\n"],"names":["utf8StringToBuffer","value","bufferToBase64URLString","buffer","bytes","str","charCode","base64URLStringToBuffer","base64URLString","base64","padLength","padded","binary","i","browserSupportsWebAuthn","toPublicKeyCredentialDescriptor","descriptor","id","isValidDomain","hostname","WebAuthnError","message","code","cause","name","identifyRegistrationError","error","options","publicKey","_a","_b","param","effectiveDomain","WebAuthnAbortService","abortError","newController","webauthnAbortService","attachments","toAuthenticatorAttachment","attachment","startRegistration","creationOptionsJSON","credential","err","rawId","response","type","transports","responsePublicKeyAlgorithm","responsePublicKey","_publicKey","responseAuthenticatorData","bufferToUTF8String","browserSupportsWebAuthnAutofill","globalPublicKeyCredential","resolve","identifyAuthenticationError","startAuthentication","requestOptionsJSON","useBrowserAutofill","allowCredentials","userHandle","platformAuthenticatorIsAvailable","fetchAsPromise","url","reject","rawResponse","contentType","HttpService","apiURL","http","method","args","fetchOptions","AuthService","baseURL","fields","connection","strategy","email","password","hash","passwordRules","errors","min","max","number","lowerCase","upperCase","customChars","customRegexp","char","MFAService","codeType","MFACodeType","PlusAuthWeb"],"mappings":"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","x_google_ignoreList":[0]}